- name: Install and Configure WireGuard on WireGuard EC2
  hosts: wireguard
  become: yes
  vars_files:
    - /home/ubuntu/ansible/var.yml

  collections:
    - community.crypto

  vars:
    wg_iface: wg0
    pub_if: eth0

  tasks:
    #— Create the directory
    - name: Ensure /etc/wireguard exists
      file:
        path: /etc/wireguard
        state: directory
        mode: '0700'

    #— Regenerate server key
    - name: Remove any existing server private key
      file:
        path: /etc/wireguard/privatekey
        state: absent

    - name: Generate new WireGuard server private key
      command: wg genkey
      register: wg_private_key

    - name: Save the new private key
      copy:
        content: "{{ wg_private_key.stdout }}"
        dest: /etc/wireguard/privatekey
        mode: '0600'

    #— Slurp & set facts for server keys
    - name: Load server private key
      slurp:
        src: /etc/wireguard/privatekey
      register: sk_file

    - name: Set server_private_key fact
      set_fact:
        server_private_key: "{{ sk_file.content | b64decode }}"

    - name: Compute server_public_key
      set_fact:
        server_public_key: "{{ server_private_key | community.crypto.wg_pubkey }}"

    #— Render server conf (with all client peers)
    - name: Render /etc/wireguard/wg0.conf
      template:
        src: templates/wg0.conf.j2
        dest: /etc/wireguard/wg0.conf
        mode: '0600'

    - name: Enable IP forwarding
      sysctl:
        name: net.ipv4.ip_forward
        value: "1"
        state: present
        reload: yes

    - name: Apply NAT and forwarding rules
      block:
        - iptables:
            table: nat
            chain: POSTROUTING
            source: "10.0.0.0/24"
            out_interface: "{{ pub_if }}"
            jump: MASQUERADE
        - iptables:
            chain: FORWARD
            in_interface: "{{ wg_iface }}"
            out_interface: "{{ pub_if }}"
            jump: ACCEPT
        - iptables:
            chain: FORWARD
            in_interface: "{{ pub_if }}"
            out_interface: "{{ wg_iface }}"
            jump: ACCEPT

    - name: Start & enable WireGuard service
      systemd:
        name: wg-quick@wg0
        enabled: yes
        state: started
    - name: Delete wrong DHCP injected route for VPN client
      command: ip route del 10.0.0.2
      ignore_errors: yes

    #— Render individual client configs
    - name: Ensure client configs directory exists
      file:
        path: /home/ubuntu/ansible/clients
        state: directory
        mode: '0755'

    - name: Render client configs
      template:
        src: templates/client.conf.j2
        dest: "/home/ubuntu/ansible/clients/{{ item.name }}.conf"
        mode: '0600'
      loop: "{{ wireguard_clients }}"
      loop_control:
        label: "{{ item.name }}"
